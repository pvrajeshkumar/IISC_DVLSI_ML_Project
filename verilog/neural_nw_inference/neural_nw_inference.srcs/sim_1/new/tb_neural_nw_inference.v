`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 06.04.2024 01:12:19
// Design Name: 
// Module Name: tb_neural_nw_inference
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module tb_neural_nw_inference;

reg clk, rst, start;
reg [0:255] img;
reg [0:255] test_imgs[0:9];
wire done;
wire [0:3] predicted_val;

integer i;

neural_nw_inference tb( .clk(clk), .rst(rst), .start(start), .test_img(img), .done(done), .predicted_val(predicted_val) );

always #1 clk = ~clk;

initial begin
test_imgs[0] <= 256'b0000001111111100000001111110110000001111110001100001111100001111000111101111111000011101111101100011111111000110001111110000110001111110000011000111100000001100011100000011100011100000001100001111000011110000111100011100000010111111100000000001111000000000;
test_imgs[1] <= 256'b0000000000001111000000000000111100000000000011110000000000001111000000000000111000000000000011100000000000011100000000000011100000000000011110000000000011111000000000011111000000000111111100000000111101110000001111100111000011111000001110001110000000000000;
test_imgs[2] <= 256'b0000000111111100000000000000111000000000000001110000000000000011000000000000001100000000000000110000000000001111000000000000111000000000111111000000001111100000001111111000000011110000000000001110000000000000111000000000000001111111111111000000011111100000;
test_imgs[3] <= 256'b0111111111000000111100001110000011000000011000000000000001100000000000001110000000000000110000000000000111111000000000000111111000000000000011110000000000000011000000000000001100000000000000110000000000001110000000000000110000000000111110000000000001110000;
test_imgs[4] <= 256'b0000000111100000000000111000000000000111100000000000111110000000000111011000000000111001100000000011100111000000011000001100000001100000110000001110000011100000110000000110000011000000011111111100000111111100111111111111110000000000000111000000000000001000;
test_imgs[5] <= 256'b0000111111111111001111000000000011111000000000000000000000000000000000000000000011000000000000001111111110000000000001111110000000000000111100000000000000111000000000000001110000000000000011000000000000011100000000000001110000000000011110000000000011100000;
test_imgs[6] <= 256'b0000011110000000000111110000000000111100000000000111100000000000011100000000000011100000000000001110000001111000110011111111111011111110000001111111000000000011111000000000011111110000000111101111111111111100111000110000000001111000000000000001110000000000;
test_imgs[7] <= 256'b0011111111100000111111001110000010000000011100000000000001110000000000000110000000000000011000000000000001100000000000000110000000000000011000000000001111100000000000011111111100000000111000000000000011100000000000001110000000000000110000000000000011000000;
test_imgs[8] <= 256'b0000001110000011000001110000011100000110000001110000110000001110000011000001110000011100001110000001110001110000000111111111110000111111100000001111110000000000111011000000000011000110000000001110011110000000011100011100000000011000111100000000000011111000;
test_imgs[9] <= 256'b0000011111110000000011100001000000111000000100000010000000000000001000000011111001100000111000100111111110000011001111000000001100000000000000110000000000000011000000000000001100000000000001100000000000000110111111000011110000011111111100000000000011000000;

clk = 0;
rst = 1;
start = 0;
#5;
rst = 0;

for (i=0; i<10; i=i+1) begin
    img = test_imgs[i];
    start = 0;
    #5;
    start = 1;
    
    $display("Image No: %d, done: %d, predicted_val: %d", i, done, predicted_val);
    
    // Wait for done signal
    //@(posedge clk);
    while (!done) begin
        @(posedge clk);
    end
            
    if (predicted_val==i)
        $display("CORRECT");
    else
        $display("WRONG");
 
end


// End simulation
start = 0;
#5;
$finish;

end
endmodule
